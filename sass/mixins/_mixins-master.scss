// Rem output with px fallback
@mixin font-size($sizeValue: 1.6) {
	font-size: ($sizeValue * 10) + px;
	font-size: $sizeValue + rem;
}

// Box model
@mixin box-sizing($box-model) {
	-webkit-box-sizing: $box-model; // Safari <= 7
	-moz-box-sizing: $box-model; // Firefox <= 19
	box-sizing: $box-model;
}

// Border radius
@mixin border-radius($radius) {
	background-clip: padding-box; /* stops bg color from leaking outside the border: */
	-webkit-border-radius: $radius;
	border-radius: $radius;
}

// Center block
@mixin center-block {
	display: block;
	margin: 0 auto;
}

// Clearfix
@mixin clearfix() {
  clear: both;
  &:before,
  &:after{
    content: " "; 
    display: table; 
  }
  &:after{
    display: block;
    clear: both;
    height: 1px;
    margin-top: -1px;
    visibility: hidden;
  }
  &{
    *zoom: 1;
  }
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

// Responsive Breakpoints
@mixin at-least($point) {
  @if $point == wide {
    @media (min-width: $wide_breakpoint) { @content; }
  }
  @else if $point == large {
    @media (min-width: $large_breakpoint) { @content; }
  }
  @else if $point == medium {
    @media (min-width: $medium_breakpoint) { @content; }
  }
  @else if $point == minimal {
    @media (min-width: $minimal_breakpoint) { @content; }
  }  
}

@mixin up-to($point) {
  @if $point == wide {
    @media (max-width: $wide_breakpoint) { @content; }
  }
  @else if $point == large {
    @media (max-width: $large_breakpoint) { @content; }
  }
  @else if $point == medium {
    @media (max-width: $medium_breakpoint) { @content; }
  }
}

// Box-sizing
@mixin box-sizing($type: "border") {
  /* Acceptable values are border, content, and padding - content is the default W3C model */ 
  box-sizing: #{$type}-box;
  -webkit-box-sizing: #{$type}-box;
  -moz-box-sizing: #{$type}-box;
}